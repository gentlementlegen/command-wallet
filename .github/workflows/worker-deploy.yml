name: Deploy Worker

on:
  push:
  workflow_dispatch:

jobs:
  deploy-to-cloudflare:
    runs-on: ubuntu-latest
    name: Automatic Cloudflare Deploy
    environment: ${{ github.ref == 'refs/heads/main' && 'main' || 'development' }}
    permissions: write-all

    steps:
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "20.10.0"

      - name: Enable corepack
        run: corepack enable

      - uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2

      - name: Update wrangler.toml Name Field
        run: |
          branch_name=$(echo '${{ github.event.ref }}' | sed 's#refs/heads/##' | sed 's#[^a-zA-Z0-9]#-#g')
          # Extract base name from wrangler.toml
          base_name=$(grep '^name = ' wrangler.toml | sed 's/^name = "\(.*\)"$/\1/')
          # Concatenate branch name with base name
          new_name="${base_name}-${branch_name}"
          # Truncate the new name to 63 characters for RFC 1035
          new_name=$(echo "$new_name" | cut -c 1-63)
          # Update the wrangler.toml file
          sed -i "s/^name = .*/name = \"$new_name\"/" wrangler.toml
          echo "Updated wrangler.toml name to: $new_name"

      - name: Deploy with Wrangler
        id: wrangler_deploy
        uses: cloudflare/wrangler-action@v3
        with:
          wranglerVersion: "3.87.0"
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          secrets: |
            SUPABASE_URL
            SUPABASE_KEY
            CLOUDFLARE_ACCOUNT_ID
            CLOUDFLARE_API_TOKEN
            ${{ secrets.KERNEL_PUBLIC_KEY && secrets.KERNEL_PUBLIC_KEY != '' && 'KERNEL_PUBLIC_KEY' || '' }}
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_KEY: ${{ secrets.SUPABASE_KEY }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          KERNEL_PUBLIC_KEY: ${{ secrets.KERNEL_PUBLIC_KEY }}

      - name: Update manifest.json worker url
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');

            const manifestPath = path.resolve("${{ github.workspace }}", './manifest.json');
            const manifest = JSON.parse(fs.readFileSync(manifestPath, 'utf8'));

            manifest["url"] = "${{ steps.wrangler_deploy.outputs.deployment-url }}";

            const updatedManifest = JSON.stringify(manifest, null, 2);
            fs.writeFileSync(manifestPath, updatedManifest);
            console.log('Updated manifest:', updatedManifest);

      - name: Get GitHub App token
        if: env.APP_ID != '' && env.APP_PRIVATE_KEY != ''
        uses: tibdex/github-app-token@v1.7.0
        id: get_installation_token
        with:
          app_id: ${{ env.APP_ID }}
          private_key: ${{ env.APP_PRIVATE_KEY }}

      - name: Update manifest.json
        shell: bash
        env:
          GITHUB_TOKEN: ${{ steps.get_installation_token.outputs.token || github.token }}
        run: |
          git add "manifest.json"
          echo "Changed files:"
          echo "$(git diff-index --cached --name-only HEAD)"
          if [ -n "$(git diff-index --cached --name-only HEAD)" ]; then
            node -e "
              const fs = require('fs');
              const path = require('path');
              const github = require('@actions/github');
              const manifestPath = path.relative('.', 'manifest.json');
  
              async function pushChanges() {
                const octokit = github.getOctokit(process.env.GITHUB_TOKEN);
  
                const context = github.context;
                const owner = context.repo.owner;
                const repo = context.repo.repo;
                const ref = 'heads/${{ github.ref_name }}';
  
                try {
                  const currentCommit = await octokit.rest.git.getRef({
                    owner,
                    repo,
                    ref
                  });
  
                  console.log('Adding file:', manifestPath);
                  const treeEntries = [
                    {
                      path: manifestPath,
                      mode: '100644',
                      type: 'blob',
                      content: fs.readFileSync(manifestPath, 'utf8'),
                    }
                  ];
                  const newTree = await octokit.rest.git.createTree({
                    owner,
                    repo,
                    base_tree: currentCommit.data.object.sha,
                    tree: treeEntries,
                  });
  
                  const newCommit = await octokit.rest.git.createCommit({
                    owner,
                    repo,
                    message: 'chore: updated manifest.json worker URL',
                    tree: newTree.data.sha,
                    parents: [currentCommit.data.object.sha]
                  });
  
                  await octokit.rest.git.updateRef({
                    owner,
                    repo,
                    ref,
                    sha: newCommit.data.sha,
                    force: true
                  });
  
                  console.log('Changes pushed successfully');
                } catch (error) {
                  console.error('Error pushing changes:', error);
                  process.exit(1);
                }
              }
  
              pushChanges();
            "
          else
            echo "No changes to commit"
          fi

      - name: Write Deployment URL to Summary
        run: |
          echo "### Deployment URL" >> $GITHUB_STEP_SUMMARY
          echo "${{ steps.wrangler_deploy.outputs.deployment-url }}" >> $GITHUB_STEP_SUMMARY
